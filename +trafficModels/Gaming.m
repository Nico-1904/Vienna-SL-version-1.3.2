classdef Gaming < trafficModels.PacketProcessing
    %Gaming Class for gaming traffic model simulations
    % It is real time traffic that is generated by
    % users engaged in interactive gaming via the Internet.
    % The packets are associated with User Datagram Protocol
    % (UDP)header after header compression
    %
    % initial author: Areen Shiyahin
    %
    % see also trafficModels.PacketProcessing
    % networkElements.ue.User
    % parameters.user.Parameters

    properties
        % Initial packet arrival time A
        % [1x1]double parameter A of the uniform distribution of initial packet
        % arrival time in seconds
        initialPacketA

        % Initial packet arrival time B
        % [1x1]double parameter B of the uniform distribution of initial packet
        % arrival time in seconds
        initialPacketB

        % Mu of the generalized extreme value distribution
        % [1x1]double location parameter of packet arrival time distribution in seconds
        MuArrival

        % sigma of the generalized extreme value distribution
        % [1x1]double scale parameter of packet arrival time distribution in seconds
        sigmaArrival

        % Mu of the generalized extreme value distribution
        % [1x1]double location parameter of packet size distribution in
        % bytes
        MuSize

        % sigma of the generalized extreme value distribution
        % [1x1]double scale parameter of packet size distribution in bytes
        sigmaSize

        % UDP header
        % [1x1]double UDP header overhead in bytes
        UDPHeader

        % initial packet time
        % [1x1]double random generation time for the initial packet
        initialPacketTime

        % packetArrival
        % [1x1]double number of slots necessary to generate new packet
        packetArrival

        % packet size
        % [1x1]double packet size in bits
        packetSize
    end

    methods
        function obj = Gaming()
            % class constructor

            % call superclass constructor
            obj = obj@trafficModels.PacketProcessing();

            % set parameters
            obj.initialPacketA = 0;
            obj.initialPacketB = 40e-3;
            obj.MuArrival      = 55e-3;
            obj.sigmaArrival   = 6e-3;
            obj.MuSize         = 120;
            obj.sigmaSize      = 36;
            obj.UDPHeader      = 2;

            %% set uniform distribution for initial packet arrival time
            distribution = makedist('Uniform','Lower', obj.initialPacketA ,'Upper', obj.initialPacketB);

            % set initial packet time in msec, it is equal to
            % number of slots that are necessary for the packet generation
            obj.initialPacketTime = ceil(random(distribution) * 1e3);
            if obj.initialPacketTime == 0
                obj.initialPacketTime = 1;
            end

            %% set packet arrival time
            obj.packetArrival = floor((obj.MuArrival-(obj.sigmaArrival*log(-log(rand)))) * 1e3) ;

            %% set packet size
            obj.packetSize = floor((obj.MuSize - (obj.sigmaSize*log(-log(rand))) + obj.UDPHeader) * 8) ;

            % check parameters
            obj.checkParametersGaming;
        end

        function checkNewPacket(obj,iSlot)
            % check if new packet generation is necessary in the current slot
            %
            % input:
            %   iSlot: [1x1]double index of current slot

            % generate initial packet
            noSlots = 0;
            checkNewPacket@trafficModels.PacketProcessing(obj,obj.packetSize, noSlots, iSlot, obj.initialPacketTime);

            % generate next packets
            if iSlot > obj.initialPacketTime
                nextPacketTime = obj.initialPacketTime + obj.packetArrival;
                checkNewPacket@trafficModels.PacketProcessing(obj,obj.packetSize, obj.packetArrival, iSlot, nextPacketTime);
            end
        end

        function [bufferedPackets, remainingBits, generationSlot] = getBufferState(obj)
            % get various information about packets
            %
            % output:
            %   bufferedPackets: [1x1]double number of buffered packets
            %   remainingBits:   [1xnPackets]double remaining number of
            %                     bits for each packet
            %   generationSlot : [1xnPackets]double generation time for
            %                     each packet

            [bufferedPackets, remainingBits, generationSlot] = getBufferState@trafficModels.PacketProcessing(obj);
        end

        function updateAfterTransmit(obj,sentBits,iSlot)
            % update data in buffer according to the user throughput
            %
            % input:
            %   sentBits:  [1x1]double number of transmitted bits in
            %                  current slot
            %   iSlot:     [1x1]double index of current slot

            updateAfterTransmit@trafficModels.PacketProcessing(obj,sentBits,iSlot);
        end

        function latency = getTransmissionLatency(obj)
            % compute packets transmission latency
            %
            % output:
            %   latency: [1xnPackets]double transmission delay of packets

            latency = getTransmissionLatency@trafficModels.PacketProcessing(obj);
        end

        function clearBuffer(obj)
            % clear packets buffer

            clearBuffer@trafficModels.PacketProcessing(obj);
        end

        function checkParametersGaming(obj)
            % check parameters compability

            if obj.initialPacketA ~= 0
                warning("Gaming:InitailPacketCompatibility", ...
                    "Parameters of the arrival time of the initial pakcet must equal the default value.");
            end

            if obj.initialPacketB ~= 40e-3
                warning("Gaming:InitailPacketCompatibility", ...
                    "Parameters of the arrival time of the initial pakcet must equal the default value.");
            end

            if obj.MuArrival ~= 55e-3
                warning("Gaming:PacketArrivalTimeCompatibility", ...
                    "Mu parameter of the generalized extreme value distribution must equal the default value.");
            end

            if obj.sigmaArrival ~= 6e-3
                warning("Gaming:PacketArrivalTimeCompatibility", ...
                    "Sigma parameter of the generalized extreme value distribution must equal the default value.");
            end

            if obj.MuSize ~= 120
                warning("Gaming:LambdaCompatibility", ...
                    "Mu parameter of the generalized extreme value distribution must equal the default value.");
            end

            if obj.sigmaSize ~= 36
                warning("Gaming:MeanReadingTimeCompatibility", ...
                    "Sigma parameter of the generalized extreme value distribution must equal the default value.");
            end

            if obj.UDPHeader ~= 2
                warning("Gaming:UDPHeaderCompatibility", ...
                    "UDP header size must equal the default value.");
            end
        end
    end
end

